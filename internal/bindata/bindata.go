// Code generated by go-bindata. DO NOT EDIT.
// sources:
// certs.bin

package bindata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCertsbin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd7\x69\x34\xd4\xff\xdf\xf8\xf1\x21\x44\x0c\x32\x84\xec\xaa\x21\x19\x84\xc9\x9a\x6d\xac\x43\xc2\xc8\x36\xbe\xd6\xec\x26\x63\xcb\x3a\xd6\xd4\x20\x5b\x96\x34\x08\x63\xcb\x9a\xa5\x2c\x59\x0a\xd9\x87\x2c\x31\xf6\x24\xd9\x35\x53\xd6\xac\xff\xf3\x3b\xfd\xce\xff\x3a\xd7\x5d\x7d\x6f\x5d\xc7\xe3\xfe\xfb\x7d\x5e\x67\xce\x73\xce\xeb\xf3\x86\x69\x18\x19\x03\xfe\x83\x15\x00\x98\x3b\x61\xa2\x05\x50\x00\xce\x71\xea\xa8\x65\xf1\x9a\x15\x8a\x85\xc4\x9a\x0c\xd5\xb9\x7e\xa3\x3c\x8a\x7d\xae\xc3\xe7\xf7\x44\x63\x17\x81\xfd\x38\x43\xbf\xc6\xf3\x53\xf0\x20\x4d\x8d\x8d\xf5\xf9\x43\x38\xe2\x93\x3f\x1b\x87\xc6\x82\xe8\xab\xa3\x85\xc7\x47\x22\x77\x11\x7b\xb9\xef\x00\x31\x3e\x51\x27\xde\x35\xef\x43\x14\xd3\xcf\x5f\x1f\x74\x70\x73\x91\xe4\x2c\x5f\x86\xae\x59\x9f\x1c\xf6\x05\x37\x5a\x49\x84\xce\x39\xc7\x62\xe3\x7f\x0d\x53\x2b\xd7\x2d\x25\xad\x44\x1d\xb1\x91\x98\x89\x99\xbd\xd8\xb1\x46\xb6\xe5\x05\x4f\x78\xfa\x0f\xba\xf7\x41\x31\x64\xc4\x95\x1b\xf7\x0d\x16\x47\x8f\x4e\xda\x2e\xa0\x78\x0b\xf1\xb2\x2c\x5f\x29\x34\xae\x8d\xa2\x54\x22\xd0\x0a\x8f\xd3\x5d\xcc\x8b\x14\x87\x72\x61\xf7\x87\xdb\x26\x57\xd3\x2a\x53\x77\xdd\x35\x17\x4e\x54\xef\x69\x5a\xa1\x49\xbc\x23\xcc\x88\x09\xf4\xc5\x39\x66\x42\xf2\x52\x92\x0a\xc8\x39\x34\xef\x15\xe5\x0b\x14\xef\xbd\x20\x6e\x42\x60\x48\x82\x99\x43\xab\x8f\x98\xf0\x3c\x8a\x24\x5b\x2c\xff\x76\x1c\x02\x5b\x27\xbc\xa7\x27\x09\x7e\x3d\x32\x9d\x7f\x0c\x93\x32\x13\xdf\x58\x6d\xa2\x10\x4f\x47\x7d\x69\x5f\x51\x0f\xf0\xd6\x3a\x47\xab\x81\x9c\x36\x2d\x61\xa7\x7f\xa4\x16\xea\x8d\xcf\xd0\xde\x99\x04\x59\x3b\x76\x69\xb4\xaa\xbd\x82\x1f\x30\xba\x5a\x6d\x44\x11\x1b\x3c\x5f\xdc\xda\x1b\xb8\x61\xc7\x27\x67\xad\x32\x7d\xae\x65\x2f\x4a\xef\x22\xfb\x09\x03\xcb\x63\x55\x82\x3f\xac\x21\x08\xa6\x39\x25\xe8\x61\x03\x2e\x7b\xeb\x2e\x14\x1b\xcf\x58\x84\x83\x38\x90\x02\xe2\x99\xfd\xcb\xc3\x36\x74\xd3\xa8\x86\xc9\xb1\xa2\x63\xf0\x2b\x79\x53\x42\xb4\x52\x6f\x28\xf7\x68\x0d\x37\x91\x1b\x4a\x0b\xa6\xc1\x8e\x36\x07\x3f\x51\x29\xa0\xb9\xcc\xa4\x40\x9d\xcf\xa2\xa8\x3c\xdf\x26\x21\xf2\x15\x60\x43\x42\xb4\x77\x29\x65\x90\x91\xe8\x68\xc8\x87\xdb\xd7\x96\x6b\x0e\xa5\x53\x7a\x42\xab\x68\x8f\x39\x3a\x63\x60\xb7\x16\xdc\xc1\xb5\xbf\xc2\x86\x43\xa4\x5b\x84\x83\x95\x34\x9f\x34\x65\xf9\xb9\x3d\x9c\x10\x1e\xaa\x85\x8a\x7d\x90\xc6\x78\xa5\x94\x24\xdb\x80\xe3\xc0\xdb\x3b\x46\x34\xf0\x5f\x2a\xc4\x41\x86\x60\xab\xbc\x76\xc8\x22\x24\xc3\x52\x57\xaf\xd4\x83\xd8\x2c\xc3\x63\xda\x76\xc9\x26\x35\x89\x11\x3e\xbe\xb2\xc1\xc1\xbb\x6b\x9b\x6c\x8b\x88\x86\xf8\x01\xfe\x82\x91\x87\x87\xcf\xdf\x9c\x07\x00\x00\x14\x30\x55\x89\x3f\xa4\x4f\x77\x41\x38\x8b\x88\x66\x0f\x01\xf2\xf1\xcb\x75\x89\x85\x2f\xca\x4f\xd1\x39\xfe\x29\x4f\x7c\xcb\xad\x70\x85\x54\x1d\x6f\xc6\x57\x4f\x44\x72\x87\x59\x9d\x1c\xee\x93\x7a\x85\x09\x00\x36\x0d\xe3\xdc\xbc\x55\x50\xc0\xca\x62\x6f\xd9\x06\x5b\xf2\x31\x76\x1c\xd7\x59\x5f\x46\x28\x7d\xc0\x1f\xbc\x16\xdc\x7b\x3d\xec\xe5\xf5\x30\x75\x1a\xbb\xba\xcf\xb2\x22\x6c\x93\x30\x5a\x53\x8d\xe2\x92\xef\xb8\x1c\xe4\x94\xe4\x8e\xb3\x0b\x7e\x46\x2d\x55\xd6\xfd\xc9\xfa\x0c\x94\x16\xff\xc9\x66\x90\xf7\xca\xba\xf8\x62\xfa\x16\x7a\x0c\xc0\xa6\x83\x27\x3b\x99\x83\x78\x11\x7a\x68\x1a\x6a\x0c\x89\x87\xe3\x95\xf2\x85\xae\xcc\xe3\xb0\x13\x8b\xa4\x5f\x2d\x9f\x73\x22\xd1\xb6\x9c\x17\xce\x5d\x4f\x14\x70\x50\x51\xc4\x25\x26\xd4\xb2\x79\x67\x2b\x7e\x53\xf8\xf9\x6e\xf5\x52\x1b\x72\x80\x98\xa6\x5c\xd6\x33\x7c\x27\xf3\x02\xd1\xe3\x03\x7f\xf5\xc7\x7a\x3d\xe6\x22\x55\x3c\x01\x93\x51\x26\x5f\x46\xc8\x33\xca\x28\xbb\xe9\x8a\x2b\xfa\x47\x04\xdc\x45\x1c\xc6\xf6\xe5\x3b\x76\x1c\x5b\x6b\xc0\x17\x03\x7c\xe0\x89\xb9\xa6\x5e\x53\x0a\x8c\x5a\xf9\x38\xf2\xcd\x21\x54\x4b\xa9\xd4\x0d\x00\x05\x80\xe2\x74\xbf\x3e\x80\xca\x3e\xcc\x02\x7a\x19\x16\x84\x87\x71\x36\xca\xfb\x05\x05\x6e\x5a\x79\xe9\xb2\x5d\xa0\x91\x73\xb7\x5e\x97\xd5\xa8\xc2\x3e\x04\xc7\x59\x4d\x2e\x8a\xb3\xbe\xa3\xdc\x1f\x3b\x54\xb8\xd1\xf2\xe4\xbc\x7d\xfc\xbd\xf7\xd4\x16\x87\x87\x35\x5a\x2e\x17\xa3\xa7\xb8\x5f\xeb\xc2\x1e\xda\x29\x49\x44\x5f\xc8\x52\x68\x54\x32\x68\xde\x2d\xfc\xb0\xbb\xd7\x08\x7c\xeb\xda\xd8\xd9\x6e\xd0\x8d\x6d\xcc\x22\x67\x0c\x49\xdc\xb7\x71\x99\x91\x76\x2a\x02\xac\x4d\xff\x7e\x5a\xb9\x9b\xcc\x18\x7e\x9c\x3e\xe1\xa5\x11\x9b\x12\x62\x3e\xdf\xa2\x9f\x04\xf1\xed\xe5\x8a\x17\xdb\x42\x79\x57\xb9\x41\xdf\x3a\x01\xed\x21\x86\xb2\x08\x61\x4e\x9e\xac\x8a\xb8\x4e\x5b\x02\x29\xbf\x74\x7e\xb3\x52\x2f\x68\xde\xf3\xed\x6f\xd1\xfd\x7b\xfd\xd8\x58\x2f\x42\x8b\xd3\xfe\x17\x92\x1b\x42\x51\x63\xbc\xef\x4b\xf5\x43\x55\xcd\xb1\x36\x0f\xa1\x4b\x1d\xe7\x37\xb7\xd4\x1d\xf3\xd8\x86\xfd\x7e\x45\x4f\x1e\x8d\x1a\x7c\xca\xcf\x58\xed\xed\x09\xfa\xae\xc9\xb8\x91\x71\x40\x55\x3c\xc9\x69\x36\x21\xc2\x1f\x53\xd6\xba\x15\xbf\xc2\x3a\x1e\x43\x54\x1d\x45\x66\xdc\x17\x1c\x7f\x5d\xd1\x75\xba\xea\xfe\xf8\x4f\xff\x90\xbf\x0b\x98\xc2\x0c\xf1\xdf\xe3\x72\xa7\x9b\x81\x23\x4f\x2b\xff\xc3\x23\xbd\xb5\x90\xca\x4f\xe4\x8a\x3a\x3f\x97\xa8\xe4\x85\x17\x16\xa9\xfa\x66\xec\xb2\x03\x63\xe1\x95\xcd\x7e\x74\x4b\x7b\xb8\x2f\xe5\xd4\xda\x91\x3b\xed\x47\x5f\x82\x22\xe7\x18\xc0\xe1\xc6\xb0\xeb\xab\x11\xee\xd1\xe4\x42\x1f\xb5\xc7\x77\x24\x6d\x24\x31\x45\x81\x20\x15\x47\xf3\x49\x25\x55\x37\xa1\x94\x73\x77\x4b\x04\xb3\x46\x8d\x8d\xa6\x84\x2e\xb8\xe2\x6f\x73\x56\x39\x72\x71\x62\x4a\xbb\x18\xb1\xec\x49\xb9\x22\x6f\x14\xdd\xfb\xb6\x4b\x82\xe5\x67\x6e\x1d\x40\x3d\x83\xf8\x29\xcc\x01\x63\x3b\x89\x72\x50\xd5\x9b\x7b\xad\x1f\x4c\xe5\xa1\x1c\x66\x89\x55\xe5\x38\xc6\xf5\xb9\xad\x40\x4c\x81\x90\x76\x8f\x57\x29\x90\x36\xc8\x0e\xaa\x92\xc4\x7a\xa3\x8a\xe7\xf2\xfe\xef\x7e\x4b\x76\x10\xc2\xc8\xb3\x77\x5e\xc4\xbf\x2a\x14\xde\x6f\x3e\xfe\x8e\x07\x83\xb6\xf6\xe7\xca\xce\x92\xe1\x88\x27\xf6\x03\x75\x4c\x7d\x5c\xb0\xf2\x6e\xf1\xfa\x5c\x51\x33\x2d\x72\x1a\xd4\xd1\x26\x2c\xcf\xcd\x71\x74\xf9\xdd\x10\xf1\xed\x4f\x6f\xbc\xd1\x53\x66\xbc\xd5\xfa\x7e\x1e\xf9\x21\x76\x5f\xea\xa8\x97\xc3\xd4\x2c\xeb\xfd\x9f\x3c\x0f\x75\x14\xb5\xfe\x9b\xfe\x0d\xa8\x89\x56\xa8\xd9\x7a\x7f\xc5\xf0\x15\x12\x90\xbd\xdf\x6c\x3b\x05\x9c\x77\xe4\xe1\x92\xb8\xbc\x27\xf9\x84\x45\xac\xcd\x32\x57\xf7\xc5\xd5\x2b\x32\xef\x92\x8a\x90\x4c\xc1\xe6\x07\xbb\x43\xd1\x42\x82\x1f\x17\x5f\x77\xcd\x76\xc1\x1f\x00\x42\x61\x70\x6c\x4c\x04\xdb\xf2\x97\x1b\x46\x1b\x6a\x80\x26\x97\x37\x93\xa1\x6b\x3e\xee\x81\x90\x34\x13\xa4\x86\x79\x50\x42\x45\x95\xdb\xf4\xc3\xd6\x6e\x06\xad\x6d\x60\x71\xfb\xd7\x63\x61\x03\x6e\x30\x7e\xc8\x58\x77\xc8\x06\xfe\x32\x41\x52\x84\x74\xd3\x7a\x55\x5b\xd0\x49\xb0\xae\x4f\x46\x7c\xd3\xda\xca\xd6\x15\xa1\x5e\x10\xf5\x3d\x27\x46\x8c\xdd\xcf\xf4\x46\x20\x6e\x77\x78\xfc\x63\xe6\x60\x8e\xf1\xfb\x98\xac\x37\xd9\x9d\x36\xb6\xc1\xf5\x50\xfd\x6b\xa1\xce\xce\xe2\x29\x35\x04\xc4\x53\x35\x0f\x6c\x87\xb6\x65\x4b\xeb\xa0\x36\x95\x4f\x9a\x45\x48\x84\x79\x49\x76\xad\xad\xe6\x80\xb9\x40\x27\xb9\xd5\x97\x4f\x20\x29\xf4\x6a\x5a\x1f\x03\x9a\x2d\xb0\xae\x51\x3e\xdb\xd4\xc4\xc4\x52\xf6\x99\xd8\x51\xf7\x4f\x74\x43\x45\x6e\xc5\xad\x6d\x2b\x28\xd8\xfe\xc2\xbb\x6a\x6a\x26\x32\xc3\x74\xe3\xe9\xaa\xfb\xe3\xdf\xe8\x1f\x66\xf0\xdf\xe3\xb6\xa7\x9b\x81\x23\xef\x0e\xb2\x24\x34\x39\x4c\x38\x63\x39\xdd\x9e\x39\xf0\x2b\x83\xb9\xa8\x78\xf0\x49\x73\xc9\x8c\xcf\x16\xfe\xa0\x8c\xe8\x01\x48\x56\xa3\x91\xf6\x34\x19\x57\xd1\xf1\xca\x56\xba\xba\x6f\xc5\x39\x84\xb4\xb7\x1c\x26\xd1\xcd\x4a\xfe\x70\xf3\xe8\xde\x97\x8c\x17\x4b\x6b\x48\x51\xa5\xc2\x9c\xb7\x4b\x9d\x04\x26\x8d\xd3\x41\x07\x67\xe3\xdd\x3a\x4b\x59\x85\x28\x32\x8f\x75\xd2\x0e\x33\x8c\x03\xee\xac\x11\x3b\x1d\xbd\x0b\x67\xe4\xfd\x1c\xb4\x52\xd6\xb9\x9f\x94\x68\x4e\xf8\x17\x63\xa6\x2e\x0a\x3e\xf8\xcc\xd2\xe6\xaf\x2b\x10\xf9\xac\x8b\xb9\xcb\x87\xf3\xa4\x64\x87\xde\x77\xfc\xca\x8c\x54\x7b\x2e\xb2\x08\x22\x51\x90\x3f\xbe\xc7\x34\xe6\x7d\x04\xee\xbb\x5e\x48\x32\x90\x9b\xb7\x36\xb7\x7d\xe4\x36\x29\xd6\xd5\xb7\x20\xab\x2b\x7c\x00\x1c\x8d\x0f\x2e\xc1\xe8\xca\xc8\x13\xc3\x67\xbc\xbf\xd1\x25\x37\x37\x87\xd0\xde\x83\x3f\x2d\xe8\x79\x04\xf1\xa4\xc0\x8b\x50\x54\xb2\x1d\x48\xf8\x37\x80\xb6\xba\x94\xdf\x16\xfe\xc4\x5b\x09\x56\x52\xd6\xce\xd1\x19\x87\x32\x35\x93\x8f\x0b\x0c\x78\x92\xd9\x7e\xdf\x8e\x64\x62\x62\xbc\x3d\x7f\x3b\x6d\x89\x6e\xc2\xef\x2f\xfa\x3f\x87\x56\x95\x25\x35\x36\xe7\xba\xa6\x63\x26\x28\x24\x51\xdc\x29\xe6\xda\x7a\x58\xfc\x63\xae\xa4\x3c\x16\xb3\xc0\x25\xc6\x9d\x2b\x21\x1d\x8c\xcc\x92\xd3\x72\x33\xcb\xb8\xb4\x57\xcb\xe6\x44\xd7\xf4\xc2\xa5\x6f\xae\x0c\xc7\x50\xd1\x57\xc9\xd4\x11\xd2\x27\x91\xca\x7d\x0a\xe7\xc2\x79\xb3\x81\x1f\x26\x0a\xc4\xc3\x34\xde\x54\xff\x56\xe5\x72\x2a\xe0\x56\x7f\x4b\x7a\xba\x14\x34\x36\xea\x56\x64\x2a\x9d\x1b\x85\x5a\xfc\xdc\x32\x36\x82\x57\xeb\xea\x0e\xe0\x92\x16\x94\xb1\xb2\xf4\xc3\xbd\x3f\x2f\xfe\x30\x95\x94\xb3\x8b\xec\x8b\xf4\xcf\x6e\x67\x54\x5e\x20\x44\x3e\xe3\xf7\x57\xb1\x8f\xd6\xe9\xda\xc1\x9a\x58\xdf\xcf\xf0\x19\xbb\x1d\x67\x76\x52\x3e\x69\xca\x9b\x6a\xac\xe6\x06\xe2\x38\xd4\x8c\x8e\xfc\xdc\x5d\x60\x17\x4b\x53\x7b\xf8\x8f\x41\x30\x68\x29\x37\xa6\xd5\x90\xb7\x76\x4c\xac\x40\x3d\x21\xd2\x80\x55\xab\xf8\x75\xcd\x7a\x5b\xa2\x62\xd6\xa8\xf8\x33\x91\x9e\xb2\x29\x92\x59\x27\x25\x87\xf6\xc4\x03\xfe\x27\x92\x23\x43\x13\x13\xab\xea\xc0\x24\x3b\xee\xc0\x17\x53\x58\x58\x47\x26\x9f\x98\x28\x26\xc3\x14\x63\x28\x7a\x09\xe5\x11\x72\xb9\x1c\xee\x07\x97\x51\x0f\xf1\x3f\xe6\x17\xf8\x0a\x4f\x1d\x62\xc9\x71\x2e\xcf\xe1\xdc\xb2\xef\x2a\x30\x89\x2a\x69\x74\xc6\x36\x5c\xbd\x1f\x39\x14\x9b\x19\xe6\xa1\xa5\xc3\x21\xc5\x1e\x21\x0d\xd7\x8d\xba\x29\xa5\x0b\x96\x90\xb4\x9f\x18\x5e\xbb\xab\xdb\x90\x46\x59\x63\xb4\x53\xa1\xa2\xd9\x89\xb3\x0a\x89\x87\x73\x90\x32\x3e\xe0\x67\xc7\x40\xcc\xaa\x68\x96\xa3\x08\xbd\xd6\x4b\x9f\xea\x3e\xb6\xee\xae\x7b\xfa\xe5\xfa\x68\xf6\xcd\xa6\x6d\x6e\x8c\x27\xf4\x53\x8b\xd3\x63\x63\x34\x8e\x5e\xdf\xb0\x07\x19\x6f\x01\x2f\x7d\xdf\xcf\x14\xd5\x9f\x4c\x5f\x4a\x1f\xb2\xb2\xd1\x9c\x46\xd8\x6f\xd2\xb9\x89\xda\x04\x66\xc5\x8d\x22\xd9\x28\x0b\xcb\x30\x8a\xdd\xe3\x1d\xbe\x2f\xe2\x31\x01\x2e\xcc\xdd\x54\x1f\x53\xaf\x18\x98\xae\xf0\xf6\x83\x65\x7a\x5a\x1f\x19\x1a\x96\xb9\xe1\xa8\x12\x2b\x94\x3a\xb7\xfc\x54\x72\xa6\xe8\xf3\x50\xe7\xcd\x4d\x06\x96\xa0\xfa\x79\x2b\xf9\xbf\xbc\xe8\xc1\xf7\x18\x30\x72\xb0\xab\x4d\x0c\x75\x2b\x37\x31\x31\x8f\x6d\xb7\x04\x92\x4e\x98\x2b\x23\x4c\x06\x94\x87\x91\x3e\x56\x86\x29\x89\x6e\x77\x6c\xfb\xf4\xc4\x4e\xf7\xaf\xfb\xe3\x5f\xfd\xfe\x93\x3a\xdd\x05\x41\xcb\x24\xf7\xea\x80\x9e\xf9\x1f\x5f\x05\x3a\x57\xb7\xee\xee\xc8\xed\x25\x9c\x8f\xd5\xf5\xdb\xc8\x4e\xb5\xa9\x84\x46\x84\xbf\x65\xbc\x57\xea\x75\x91\x2d\xd7\x0f\xad\x18\x28\x71\x2c\xbf\x42\xe2\xb6\x69\xe2\x79\xae\xf9\xb0\x5a\xde\x99\x40\x55\x95\x6e\x84\xec\x71\xfe\xc9\x33\x3f\x65\xb0\x30\xb1\x44\xf6\xfc\x6e\x37\x39\x4f\x27\x28\xb5\x32\x62\xbf\xc3\x43\x6c\xcd\xde\xcc\x2f\xe6\x4d\x70\x40\x7c\xf6\x9c\x09\x7a\xd4\xf0\xb3\x7e\xc0\x1b\x4a\xde\x36\xa6\xb6\xcf\x5d\xad\x97\xb3\x9f\xcb\x58\xa1\xa0\xe0\x7b\x61\x6c\x6f\x2b\x8c\xe6\x5f\x21\x00\x4b\xb5\x43\x59\x81\x8e\xe0\xdc\x48\x94\xd0\x45\x3e\x7e\xe7\x59\x2d\x2f\xd6\x24\xc3\x4f\x2e\x9d\x5c\x85\x8c\xbf\x27\x74\x72\x76\xf9\x8c\x5f\xfc\x1a\xc1\x0d\x3f\x45\x53\x4b\x47\x24\x7f\xbc\x79\xd2\x2c\xb5\xd3\x54\x08\xec\xe2\xb4\xc2\x37\x75\xa0\xf8\xe9\x5f\xa3\x68\x06\x33\x55\xa7\xe2\x56\xba\xf8\xd9\xf4\xf2\x23\x6f\xb8\x7c\x78\xea\xd2\xaf\x70\x5e\x1e\x60\x6f\x23\xae\x09\x91\x0a\xb3\x2d\x58\x75\x4f\xb2\x1c\xb5\x83\x06\xb4\xaf\xdd\x1f\x50\x27\x99\xa1\x58\xdf\x95\x60\xa5\x29\x32\x94\xd6\x7e\x8c\x04\xfc\xcd\xfe\x13\x2b\x74\x77\xfc\xb4\x09\x0d\xc0\x50\x3d\xaf\x0b\xe4\x0c\xcd\xfe\x7e\xf9\x6d\x3e\xc8\x77\xda\xfb\xe8\x25\x3d\xb3\x63\x06\x17\x0e\x19\x12\x53\x9d\x40\x51\x1b\x64\x67\xdc\x0a\xcf\x95\x62\xe5\xf8\x85\x2c\xd0\x01\xe8\xc9\xc4\x11\xc5\x19\x16\x15\xf8\xd0\x49\x25\xc7\xb2\x74\x75\x65\xee\xc2\x0f\x0b\x79\x6c\x0c\xdd\x61\x85\x32\xd7\x2f\x41\x84\xe9\xe7\xb9\x96\xe7\x8f\xa9\x31\xf1\xb5\xf3\x54\x57\x05\x35\xbc\x2f\xd7\x1e\x7f\x63\x44\x40\x65\x94\xd6\x8a\xd1\xa3\x37\x1b\xf1\x7d\x82\x90\xb4\x47\xb2\x18\x6b\x11\xae\x5d\x23\xc0\x00\x8d\xc9\xb7\xc4\x01\x4e\x10\xd2\xfc\xeb\x5d\xa6\x82\x56\xe1\xcb\xde\x8f\x09\x43\xdd\xeb\xca\xe5\xe8\x83\x01\x9f\xd9\x1f\x7c\x83\xd6\x9a\x52\xf4\x86\xbf\xeb\x5e\xf2\x4c\x6d\x7d\x53\x66\xc5\x66\x51\x0b\x5f\xbf\xda\xb1\x3d\x2d\xe4\x48\xa2\x11\x22\xfe\x98\xf6\x7e\xe0\xd4\xf6\xbd\x41\x56\xda\x31\xcc\x4b\x00\xc5\xed\x5f\x7f\x25\xc7\x6b\xe4\xee\xe6\xfa\xef\xe6\x8b\x78\xdc\x4f\x77\xa9\x66\xba\xd7\xd5\xc4\x3b\x08\x7d\xca\x60\xce\xab\x40\x73\x0b\xe7\xb5\x1a\xea\xb2\x8f\xf0\x9a\x98\x7a\xfe\xce\xcf\x60\x13\x86\xd3\x55\xf7\xc7\xff\xde\x7f\xa7\x0a\xf8\x7f\xf6\x9f\xdd\xe9\x66\x00\x05\xd2\xd2\x17\x46\x77\x24\x1e\xd1\x8b\x03\xef\x9a\xd4\x4a\x1e\x24\xeb\x0f\x7a\xa7\xb2\xd7\xc8\x07\xcc\x52\x31\xae\x40\xda\x79\x64\xba\x76\x15\xc8\xba\x23\x0b\xfa\xfc\xa5\x16\x1e\xab\xdb\xe9\x7a\xad\x3b\x34\x62\xb8\xec\xef\xee\x92\x51\xd3\x1e\xd7\x66\x46\x07\xdf\x67\xcf\x93\x96\xa1\x5f\xc0\xd2\x1b\xc9\xa1\xa5\x94\xac\x43\x54\x61\x99\xbb\xba\x8f\x19\xdd\xa8\x22\xb7\xfa\x21\xa5\x22\x69\x94\x4d\x26\xe4\xb1\xe6\x14\xd7\x8d\x07\xf4\x0b\xe4\x04\xb0\xb3\xdb\xe0\xcb\xdd\x29\x49\xeb\x88\xaa\x04\xd7\x5f\x1b\x46\xc8\xa3\x88\x58\x07\xe5\x1f\x0f\x06\x54\x80\x16\xda\x27\xf3\x10\x44\xec\x5b\x29\xa4\x2a\x42\x1a\x02\x83\x96\x6d\x27\x0e\x8e\x5c\x98\xa7\x52\x0c\xb5\x18\x66\x3d\xcc\x64\x5a\xdc\x57\x29\xe8\x76\xa0\xe9\xb5\x77\x69\xfa\xa1\x9e\x07\x79\xe9\x62\x49\xa6\xbf\x4b\xc4\x4d\x99\xc4\xb1\x66\xf2\x0b\xe7\xea\x65\x79\xd6\x1b\xf4\xde\x42\xca\xec\xd2\x3b\xf8\x25\x1d\xfe\xe3\xf5\x54\x9f\xe3\x48\xf0\x5e\xb0\x8a\x1d\x51\xcb\x13\xa1\x88\x66\xcf\xba\x5d\x91\xf0\xac\x8a\x7d\xc1\xb2\x46\x72\xb3\xa6\x0d\x2f\x86\xb6\x3c\xee\xf4\x40\xe5\xf9\xfd\xd5\xfb\x27\xe9\x65\x8b\x26\x7c\x70\xdb\xa8\x9f\xcb\x6b\x09\xab\xc3\xfc\xe9\x5e\x31\x59\xcc\xc0\x3f\x4d\x75\x3c\xcd\xf9\xf6\x07\xea\xe6\x0b\xab\x4f\xce\x67\xc5\xb4\x3d\xea\xf4\xa5\xb1\xf6\xe9\x7e\x2f\xd3\x1d\xa6\xae\x92\x4a\x99\x23\x98\x4e\x5f\x5f\xae\x2d\xab\x8c\x12\x2e\xca\xfa\x96\x06\x26\x54\x57\x8b\x30\x71\x2e\x30\x4b\x92\x53\x6a\xb2\xc9\xa0\x9b\x9a\xb3\xdd\x3b\xad\xc5\xa3\x96\xc3\x71\x2f\xb9\xb5\x6a\x86\xf8\xee\x1a\x83\xdb\xba\xc2\x40\x16\x42\xbe\x23\xbd\x4e\x19\x5d\xcb\xd2\xe4\xb9\x03\xb3\x45\xac\x4d\x11\x48\xe2\x30\x35\x80\x3d\xb9\xfb\xa0\x18\x5a\x54\x98\x98\x20\x98\xf5\x43\x84\xa1\xb0\xa1\x5a\x81\xe5\x73\x6a\xe1\x31\xe7\x20\x11\xac\x2d\xe0\xec\x6f\x63\xe1\x88\x88\x7b\x2f\xe3\xfc\x22\xf1\x1f\x69\x8d\x43\x4b\xaf\x40\x46\xd0\xdc\x7c\xf7\x73\xee\xcc\x7d\x77\x1b\x27\xac\xaf\xb7\x88\xbe\xaf\xd1\x6d\x71\x13\x71\x96\x92\x66\x36\xef\xf7\x34\x3d\x2a\xc6\x15\xfb\xe1\x45\xac\xec\xaf\x71\x70\x1a\x14\xd3\xa1\xc5\x98\x6e\xa9\x70\xd5\x89\x8d\x23\x9f\xba\xcc\xe7\x97\xbc\xc0\x14\x96\x35\xdd\xde\x4f\x7a\x47\xae\xd2\xb4\x8f\x02\x22\x4e\x57\xdd\x1f\xff\x46\xff\xff\xff\xfd\x63\x7f\xba\x19\x40\x81\xb4\x29\xe5\x06\xc8\xda\xce\x10\x31\xe4\x8c\xab\xc2\x3a\x6c\x82\xb9\xcb\x6b\x85\x70\x1d\x58\x10\x85\xad\xc3\x10\x2e\x3a\xd3\xd7\xcc\x67\xeb\x97\x36\x82\x57\x9e\x82\x29\xd2\x2d\xa9\xb8\xaa\x60\xfe\x8b\xd1\x1c\x97\xcb\xfd\xa8\x9d\x57\x84\xf1\x0d\xe1\x4e\x3f\x94\x98\x07\xbd\x5a\x48\x7c\x78\x71\x7c\x89\x12\xe8\x27\x2f\xc7\xad\x62\x11\xb5\x70\x12\xba\x64\x6b\xc1\xee\x45\x84\x40\xe7\x41\x43\xf3\x20\xfb\x62\x99\x39\x55\xca\xca\x40\x71\x54\xe6\x1a\x44\x44\x8f\xdd\xf1\x57\xbb\x1c\x4b\x47\x02\xeb\xab\x73\xdf\x3c\x08\xd3\x84\x69\xd0\x51\xe0\x52\x70\xa0\xff\xc4\xf3\xc5\xb2\xf6\x7b\xa6\x73\x23\x2b\x6b\xf7\xdf\x28\x3e\xdb\xea\x00\x3a\x15\x52\xce\xd6\x24\x55\x3a\xda\xf6\x4b\x62\xe9\xc7\x74\x58\x5e\x73\x37\xd5\x5d\x12\xa1\x21\x5f\x73\x18\xa9\x5c\x5f\x38\x5c\x9f\xa9\x88\xd1\x91\x9e\x8a\x5f\x0c\x95\x60\x4f\xb7\x13\x60\xfb\x07\xc4\xed\xae\x4c\x57\xca\xa9\xd1\x46\x53\x86\xee\x51\xab\xf1\xd0\xc9\xe5\x50\xe8\xf7\xaf\x5d\x78\x13\xec\x6e\x59\xc6\x14\x67\xb7\xf7\xbc\x33\xf5\xf6\x90\xb8\x70\x1d\x03\x12\xb3\x6b\x18\x8e\x4b\x97\x76\x00\x5f\x3b\x75\xff\x67\xce\x9c\x39\x73\xe6\xcc\x99\x33\x67\xce\x9c\x39\x73\xe6\xcc\x99\x33\x67\xce\x9c\xf9\x3f\xe3\xff\x05\x00\x00\xff\xff\xc2\x69\xa5\xdb\x00\x28\x00\x00")

func bindataCertsbinBytes() ([]byte, error) {
	return bindataRead(
		_bindataCertsbin,
		"certs.bin",
	)
}



func bindataCertsbin() (*asset, error) {
	bytes, err := bindataCertsbinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "certs.bin",
		size: 10240,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1589373398, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"certs.bin": bindataCertsbin,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"certs.bin": {Func: bindataCertsbin, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
